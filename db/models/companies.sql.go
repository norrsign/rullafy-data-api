// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: companies.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (id, name, address, phone)
VALUES ($1, $2, $3, $4)
RETURNING id, name, address, phone
`

type CreateCompanyParams struct {
	ID      string
	Name    string
	Address pgtype.Text
	Phone   pgtype.Text
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.Phone,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies
WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteCompany, id)
	return err
}

const getCompany = `-- name: GetCompany :one
SELECT id, name, address, phone
FROM companies
WHERE id = $1
`

func (q *Queries) GetCompany(ctx context.Context, id string) (Company, error) {
	row := q.db.QueryRow(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, name, address, phone
FROM companies
ORDER BY name
`

func (q *Queries) ListCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.Query(ctx, listCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Phone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies
SET name = $2,
    address = $3,
    phone = $4
WHERE id = $1
RETURNING id, name, address, phone
`

type UpdateCompanyParams struct {
	ID      string
	Name    string
	Address pgtype.Text
	Phone   pgtype.Text
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, updateCompany,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.Phone,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
	)
	return i, err
}
